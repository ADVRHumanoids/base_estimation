<?xml version='1.0' encoding='UTF-8'?>
<root>
 <tabbed_widget parent="main_window" name="Main Window">
  <Tab tab_name="tab1" containers="1">
   <Container>
    <DockSplitter orientation="-" count="3" sizes="0.333333;0.333333;0.333333">
     <DockSplitter orientation="|" count="2" sizes="0.5;0.5">
      <DockArea name="...">
       <plot flip_y="false" style="Lines" flip_x="false" mode="TimeSeries">
        <range right="19.040250" bottom="0.019824" left="0.000000" top="0.019840"/>
        <limitY/>
        <curve color="#1f77b4" name="/centauro_base_estimation/base_link/pose/transform/translation/x"/>
        <curve color="#ff7f0e" name="/xbotcore/link_state/pelvis/pose/pose/position/x"/>
       </plot>
      </DockArea>
      <DockArea name="...">
       <plot flip_y="false" style="Lines" flip_x="false" mode="TimeSeries">
        <range right="19.040250" bottom="-0.000180" left="0.000000" top="-0.000175"/>
        <limitY/>
        <curve color="#17becf" name="/centauro_base_estimation/base_link/pose/transform/rotation/roll"/>
        <curve color="#d62728" name="/xbotcore/link_state/pelvis/pose/pose/orientation/roll"/>
       </plot>
      </DockArea>
     </DockSplitter>
     <DockSplitter orientation="|" count="2" sizes="0.5;0.5">
      <DockArea name="...">
       <plot flip_y="false" style="Lines" flip_x="false" mode="TimeSeries">
        <range right="19.040250" bottom="0.004192" left="0.000000" top="0.004215"/>
        <limitY/>
        <curve color="#d62728" name="/centauro_base_estimation/base_link/pose/transform/translation/y"/>
        <curve color="#f14cc1" name="/xbotcore/link_state/pelvis/pose/pose/position/y"/>
       </plot>
      </DockArea>
      <DockArea name="...">
       <plot flip_y="false" style="Lines" flip_x="false" mode="TimeSeries">
        <range right="19.040250" bottom="0.003770" left="0.000000" top="0.003775"/>
        <limitY/>
        <curve color="#bcbd22" name="/centauro_base_estimation/base_link/pose/transform/rotation/pitch"/>
        <curve color="#1ac938" name="/xbotcore/link_state/pelvis/pose/pose/orientation/pitch"/>
       </plot>
      </DockArea>
     </DockSplitter>
     <DockSplitter orientation="|" count="2" sizes="0.5;0.5">
      <DockArea name="...">
       <plot flip_y="false" style="Lines" flip_x="false" mode="TimeSeries">
        <range right="19.040250" bottom="0.804333" left="0.000000" top="0.804338"/>
        <limitY/>
        <curve color="#1ac938" name="/centauro_base_estimation/base_link/pose/transform/translation/z"/>
        <curve color="#9467bd" name="/xbotcore/link_state/pelvis/pose/pose/position/z"/>
       </plot>
      </DockArea>
      <DockArea name="...">
       <plot flip_y="false" style="Lines" flip_x="false" mode="TimeSeries">
        <range right="19.040250" bottom="-0.012548" left="0.000000" top="-0.012535"/>
        <limitY/>
        <curve color="#1f77b4" name="/centauro_base_estimation/base_link/pose/transform/rotation/yaw"/>
        <curve color="#ff7f0e" name="/xbotcore/link_state/pelvis/pose/pose/orientation/yaw"/>
       </plot>
      </DockArea>
     </DockSplitter>
    </DockSplitter>
   </Container>
  </Tab>
  <currentTabIndex index="0"/>
 </tabbed_widget>
 <use_relative_time_offset enabled="1"/>
 <!-- - - - - - - - - - - - - - - -->
 <!-- - - - - - - - - - - - - - - -->
 <Plugins>
  <plugin ID="DataLoad CSV">
   <parameters time_axis="" delimiter="0"/>
  </plugin>
  <plugin ID="DataLoad MCAP"/>
  <plugin ID="DataLoad ROS bags">
   <use_header_stamp value="false"/>
   <discard_large_arrays value="true"/>
   <max_array_size value="100"/>
   <boolean_strings_to_number value="true"/>
   <remove_suffix_from_strings value="true"/>
   <selected_topics value="/tf_static;/diagnostics;/legged_robot/desiredFeetTrajectory/LH;/tf;/simple_marker_dagana_2_tcp/update_full;/simple_marker_dagana_2_tcp/update;/simple_marker_arm1_8/update_full;/simple_marker_arm1_8/update;/rosout_agg;/rosout;/rosmon_1707224448419172520/state;/legged_robot_mpc_policy;/legged_robot_mpc_observation;/legged_robot/optimizedStateTrajectory;/legged_robot/desiredFeetTrajectory/RH;/legged_robot/desiredFeetTrajectory/RF;/legged_robot/desiredFeetTrajectory/LF;/legged_robot/desiredBaseTrajectory;/legged_robot/currentState"/>
  </plugin>
  <plugin ID="DataLoad ULog"/>
  <plugin ID="MQTT Subscriber (Mosquitto)"/>
  <plugin ID="ROS Topic Subscriber">
   <use_header_stamp value="false"/>
   <discard_large_arrays value="true"/>
   <max_array_size value="100"/>
   <boolean_strings_to_number value="false"/>
   <remove_suffix_from_strings value="false"/>
   <selected_topics value="/centauro_base_estimation/base_link/pose;/centauro_base_estimation/contacts/wrench;/centauro_base_estimation/contacts/status;/centauro_base_estimation/contacts/haptic_status;/centauro_base_estimation/base_link/raw_twist;/centauro_base_estimation/base_link/twist;/xbotcore/command;/xbotcore/gripper/dagana_2/state;/xbotcore/imu/imu_link;/xbotcore/joint_device_info;/xbotcore/joint_states;/xbotcore/lifecycle_events;/xbotcore/link_state/pelvis/pose;/xbotcore/link_state/pelvis/twist;/xbotcore/link_state/wheel_1/pose;/xbotcore/link_state/wheel_1/twist;/xbotcore/statistics;/xbotcore/status"/>
  </plugin>
  <plugin ID="UDP Server"/>
  <plugin ID="WebSocket Server"/>
  <plugin ID="ZMQ Subscriber"/>
  <plugin ID="Fast Fourier Transform"/>
  <plugin ID="Quaternion to RPY"/>
  <plugin ID="Reactive Script Editor">
   <library code="--[[ Helper function to create a series from arrays&#xa;&#xa; new_series: a series previously created with ScatterXY.new(name)&#xa; prefix:     prefix of the timeseries, before the index of the array&#xa; suffix_X:   suffix to complete the name of the series containing the X value. If [nil], use the index of the array.&#xa; suffix_Y:   suffix to complete the name of the series containing the Y value&#xa; timestamp:   usually the tracker_time variable&#xa;              &#xa; Example:&#xa; &#xa; Assuming we have multiple series in the form:&#xa; &#xa;   /trajectory/node.{X}/position/x&#xa;   /trajectory/node.{X}/position/y&#xa;   &#xa; where {N} is the index of the array (integer). We can create a reactive series from the array with:&#xa; &#xa;   new_series = ScatterXY.new(&quot;my_trajectory&quot;) &#xa;   CreateSeriesFromArray( new_series, &quot;/trajectory/node&quot;, &quot;position/x&quot;, &quot;position/y&quot;, tracker_time );&#xa;--]]&#xa;&#xa;function CreateSeriesFromArray( new_series, prefix, suffix_X, suffix_Y, timestamp )&#xa;  &#xa;  --- clear previous values&#xa;  new_series:clear()&#xa;  &#xa;  --- Append points to new_series&#xa;  index = 0&#xa;  while(true) do&#xa;&#xa;    x = index;&#xa;    -- if not nil, get the X coordinate from a series&#xa;    if suffix_X ~= nil then &#xa;      series_x = TimeseriesView.find( string.format( &quot;%s.%d/%s&quot;, prefix, index, suffix_X) )&#xa;      if series_x == nil then break end&#xa;      x = series_x:atTime(timestamp)&#x9; &#xa;    end&#xa;    &#xa;    series_y = TimeseriesView.find( string.format( &quot;%s.%d/%s&quot;, prefix, index, suffix_Y) )&#xa;    if series_y == nil then break end &#xa;    y = series_y:atTime(timestamp)&#xa;    &#xa;    new_series:push_back(x,y)&#xa;    index = index+1&#xa;  end&#xa;end&#xa;&#xa;--[[ Similar to the built-in function GetSeriesNames(), but select only the names with a give prefix. --]]&#xa;&#xa;function GetSeriesNamesByPrefix(prefix)&#xa;  -- GetSeriesNames(9 is a built-in function&#xa;  all_names = GetSeriesNames()&#xa;  filtered_names = {}&#xa;  for i, name in ipairs(all_names)  do&#xa;    -- check the prefix&#xa;    if name:find(prefix, 1, #prefix) then&#xa;      table.insert(filtered_names, name);&#xa;    end&#xa;  end&#xa;  return filtered_names&#xa;end&#xa;&#xa;--[[ Modify an existing series, applying offsets to all their X and Y values&#xa;&#xa; series: an existing timeseries, obtained with TimeseriesView.find(name)&#xa; delta_x: offset to apply to each x value&#xa; delta_y: offset to apply to each y value &#xa;  &#xa;--]]&#xa;&#xa;function ApplyOffsetInPlace(series, delta_x, delta_y)&#xa;  -- use C++ indeces, not Lua indeces&#xa;  for index=0, series:size()-1 do&#xa;    x,y = series:at(index)&#xa;    series:set(index, x + delta_x, y + delta_y)&#xa;  end&#xa;end&#xa;"/>
   <scripts/>
  </plugin>
  <plugin ID="CSV Exporter"/>
  <plugin ID="ROS /rosout Visualization"/>
  <plugin ID="ROS Topic Re-Publisher"/>
 </Plugins>
 <!-- - - - - - - - - - - - - - - -->
 <previouslyLoaded_Datafiles/>
 <previouslyLoaded_Streamer name="ROS Topic Subscriber"/>
 <!-- - - - - - - - - - - - - - - -->
 <customMathEquations/>
 <snippets/>
 <!-- - - - - - - - - - - - - - - -->
</root>

