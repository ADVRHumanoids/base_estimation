XBotInterface:
  urdf_path: $(rospack find cogimon_urdf)/urdf/cogimon.urdf
  srdf_path: $(rospack find cogimon_srdf)/srdf/cogimon.srdf

ModelInterface:
  model_type: "RBDL"
  is_model_floating_base: "true"


## XBot2-related configuration

# hal
xbotcore_device_configs:
    sim: $(rospack find cogimon_config)/hal/cogimon_sim.yaml
    dummy: $(rospack find cogimon_config)/hal/cogimon_dummy.yaml
    ec: $CONFIG_ROOT/hal/cogimon_ec_all.yaml
    ec_imp: $CONFIG_ROOT/hal/cogimon_ec_all.yaml
    ec_idle: $CONFIG_ROOT/hal/cogimon_ec_all.yaml


# threads
xbotcore_threads:
    rt_main:  {sched: fifo , prio: 60, period: 0.002, core_id: 2}
    nrt_main: {sched: other, prio: 0 , period: 0.005}


# plugins
xbotcore_plugins:

    homing:
        thread: rt_main
        type: homing_example

    ros_io: {thread: nrt_main, type: ros_io}

    ros_control: {thread: nrt_main, type: ros_control}

    base_estimation:
        thread: rt_main
        type: base_estimation
        params:
            ik_problem: {type: yamlfile, value: $PWD/cogimon_base_estimation.stack}
            #world_frame_link: {type: string, value: l_sole}
            world_from_gz: {type: bool, value: true}
            use_imu: {type: bool, value: true}
            enable_log: {type: bool, value: false}
            surface_contacts:
              type: map<string>
              value:
                l_leg_ft: l_foot  # ft -> vertex prefix
                r_leg_ft: r_foot
            filter_damping: {type: double, value: 1.}
            filter_omega: {type: double, value: 100.}
            contact_attach_thr: {type: double, value: 100.}
            contact_release_thr: {type: double, value: 50.}


#    inverse_dynamics:
#        thread: rt_main
#        type: cartesio_plugin
#        params:
#            problem_description: {type: file, value: $PWD/cogimon_inverse_dynamics.stack}
#            enable_feedback: {type: bool, value: true}
#            use_ground_truth: {type: bool, value: false}
#            model_state_from_topic: {type: bool, value: true}
#            enable_log: {type: bool, value: false}
#            joint_impedance_scaling: {type: double, value: 0.1}
#        remap:
#            ~/model_state: /base_estimation/model_state

#    impedance_zero:
#        type: impedance_setpoint
#        thread: rt_main
#        params:
#            time: {value: 2.0, type: double}

#    impedance_restore:
#        type: impedance_setpoint
#        thread: rt_main
#        params:
#            time: {value: 2.0, type: double}
#            restore_impedance: {value: true, type: bool}

# global parameters
xbotcore_param:
    /jm/tx_filter_autostart: {value: true, type: bool}
    /jm/tx_filter_cutoff: {value: 2.0, type: double}
    /jm/enable_safety: {value: false, type: bool}
    /xbot_internal/ros_io/call_timeout: {value: 1.0, type: chrono}
    /rt_main/memory_hooks: {value: true, type: bool}






